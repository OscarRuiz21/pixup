package unam.diplomado.pixup.colonia.service;

import jakarta.ejb.Local;
import unam.diplomado.pixup.colonia.domain.Colonia;

@Local
public interface ColoniaService {

    Colonia obtenerColoniaPorId(Integer id);
    Colonia crearColonia(Colonia colonia);
    Colonia actualizarColonia(Colonia colonia);
    void eliminarColoniaPorId(Integer id);

}


package unam.diplomado.pixup.colonia.domain;

public class ColoniaNotFoundException extends RuntimeException {

    public ColoniaNotFoundException(Integer id) {
        super("No se encontró la colonia con id: " + id);
    }

}


package unam.diplomado.pixup.colonia.service;

import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import unam.diplomado.pixup.colonia.domain.Colonia;
import unam.diplomado.pixup.colonia.domain.ColoniaNotFoundException;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;

import java.util.Optional;

@Stateless
public class ColoniaServiceImpl implements ColoniaService {

    @Inject
    private ColoniaRepository coloniaRepository;

    @Override
    public Colonia obtenerColoniaPorId(Integer id) {
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            return colonia.get();
        }
        throw new ColoniaNotFoundException(id);
    }

    @Override
    public Colonia crearColonia(Colonia colonia) {
        return null;
    }

    @Override
    public Colonia actualizarColonia(Colonia colonia) {
        return null;
    }

    @Override
    public void eliminarColoniaPorId(Integer id) {

    }
}


package unam.diplomado.pixup.colonia.api;

import jakarta.inject.Inject;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.domain.Colonia;
import unam.diplomado.pixup.colonia.domain.ColoniaNotFoundException;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;
import unam.diplomado.pixup.colonia.service.ColoniaService;

import java.util.Collection;
import java.util.Optional;

public class ColoniaResource implements ColoniaApi {

    @Inject
    private ColoniaRepository coloniaRepository;
    @Inject
    private ColoniaService coloniaService;

    @Override
    public Response getColoniaById(Integer id) {
        try {
            Colonia colonia = coloniaService.obtenerColoniaPorId(id);
            return Response
                    .status(Response.Status.OK)
                    .entity(colonia)
                    .build();
        } catch (Exception e) {
            return Response
                    .status(Response.Status.NOT_FOUND)
                    .entity(e.getCause().getMessage())
                    .build();
        }
        /*
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            return Response
                    .status(Response.Status.OK)
                    .entity(colonia.get())
                    .build();
        }
        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(null)
                .build();
         */
    }

    @Override
    public Collection<Colonia> getColoniasByCp(String cp) {
        return coloniaRepository.findByCp(cp);
    }

}



package unam.diplomado.pixup.colonia.domain;

public class ColoniaAlreadyExistsException extends RuntimeException {

    public ColoniaAlreadyExistsException(String cp, String nombre) {
        super("Ya existe una colonia con el cp: " + cp + " y nombre: " + nombre);
    }

}



package unam.diplomado.pixup.colonia.repository;

import unam.diplomado.pixup.colonia.domain.Municipio;

import java.util.Optional;

public interface MunicipioRepository {

    Optional<Municipio> findById(Integer id);

}


package unam.diplomado.pixup.colonia.repository;

import jakarta.inject.Singleton;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import unam.diplomado.pixup.colonia.domain.Municipio;

import java.util.Optional;

@Singleton
public class JpaMunicipioRepository implements MunicipioRepository {

    @PersistenceContext(unitName="pixup")
    private EntityManager entityManager;

    @Override
    public Optional<Municipio> findById(Integer id) {
        Municipio municipio = entityManager.find(Municipio.class, id);
        return municipio != null ? Optional.of(municipio) : Optional.empty();
    }

}



package unam.diplomado.pixup.colonia.domain;

public class MunicipioNotFoundException extends RuntimeException {

    public MunicipioNotFoundException(Integer id) {
        super("No existe el municipio con id: " + id);
    }

}


package unam.diplomado.pixup.colonia.domain;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;

@Data
@NoArgsConstructor
@Entity
public class Colonia implements Serializable {

    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private Integer id;

    @NotBlank(message="Nombre es requerido")
    private String nombre;

    @Pattern(regexp="^(\\d{5})$",
            message="Formato no válido para código postal")
    private String cp;

    @ManyToOne(targetEntity=Municipio.class)
    @JoinColumn(name="id_municipio", nullable=false)
    @NotNull(message="La colonia debe estar asociada a un municipio")
    private Municipio municipio;

}


package unam.diplomado.pixup.colonia.service;

import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import unam.diplomado.pixup.colonia.domain.*;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;
import unam.diplomado.pixup.colonia.repository.MunicipioRepository;

import java.util.Optional;

@Stateless
public class ColoniaServiceImpl implements ColoniaService {

    @Inject
    private ColoniaRepository coloniaRepository;
    @Inject
    private MunicipioRepository municipioRepository;

    @Override
    public Colonia obtenerColoniaPorId(Integer id) {
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            return colonia.get();
        }
        throw new ColoniaNotFoundException(id);
    }

    @Override
    public Colonia crearColonia(Colonia colonia) {
        Optional<Colonia> coloniaExistente =
            coloniaRepository.findByCpAndNombre(colonia.getCp(), colonia.getNombre());
        if (coloniaExistente.isPresent()) {
            throw new ColoniaAlreadyExistsException(colonia.getCp(), colonia.getNombre());
        }

        Optional<Municipio> municipioExistente =
            municipioRepository.findById(colonia.getMunicipio().getId());
        if (municipioExistente.isEmpty()) {
            throw new MunicipioNotFoundException(colonia.getMunicipio().getId());
        }
        colonia.setMunicipio(municipioExistente.get());

        coloniaRepository.saveOrUpdate(colonia);
        return colonia;
    }

    @Override
    public Colonia actualizarColonia(Colonia colonia) {
        Optional<Colonia> coloniaExistente = coloniaRepository.findById(colonia.getId());
        if (coloniaExistente.isEmpty()) {
            throw new ColoniaNotFoundException(colonia.getId());
        }

        Optional<Colonia> coloniaExistente2 =
                coloniaRepository.findByCpAndNombre(colonia.getCp(), colonia.getNombre());
        if (coloniaExistente2.isPresent()) {
            throw new ColoniaAlreadyExistsException(colonia.getCp(), colonia.getNombre());
        }

        Optional<Municipio> municipioExistente =
                municipioRepository.findById(colonia.getMunicipio().getId());
        if (municipioExistente.isEmpty()) {
            throw new MunicipioNotFoundException(colonia.getMunicipio().getId());
        }

        Colonia coloniaActualizar = coloniaExistente.get();
        coloniaActualizar.setMunicipio(municipioExistente.get());
        coloniaActualizar.setNombre(colonia.getNombre());
        coloniaActualizar.setCp(colonia.getCp());

        coloniaRepository.saveOrUpdate(colonia);
        return colonia;
    }

    @Override
    public void eliminarColoniaPorId(Integer id) {
        /*
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            coloniaRepository.delete(colonia.get());
        }
         */
        coloniaRepository.findById(id)
            .ifPresent(colonia -> coloniaRepository.delete(colonia));
    }

}


package unam.diplomado.pixup.colonia.api;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.domain.Colonia;

import java.util.Collection;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("colonias")
public interface ColoniaApi {

    @GET
    @Path("{id}")
    Response getColoniaById(@PathParam("id") Integer id);

    @GET
    Collection<Colonia> getColoniasByCp(
            @NotBlank @QueryParam("cp") String cp);

    @DELETE
    @Path("{id}")
    void deleteColonia(@PathParam("id") Integer id);

    @POST
    Response createColonia(@NotNull @Valid Colonia colonia);

    @PUT
    @Path("{id}")
    Colonia updateColonia(@PathParam("id") Integer id, Colonia colonia);

}




package unam.diplomado.pixup.colonia.api;

import jakarta.inject.Inject;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.domain.Colonia;
import unam.diplomado.pixup.colonia.domain.ColoniaAlreadyExistsException;
import unam.diplomado.pixup.colonia.domain.ColoniaNotFoundException;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;
import unam.diplomado.pixup.colonia.service.ColoniaService;

import java.util.Collection;
import java.util.Optional;

public class ColoniaResource implements ColoniaApi {

    @Inject
    private ColoniaRepository coloniaRepository;
    @Inject
    private ColoniaService coloniaService;

    @Override
    public Response getColoniaById(Integer id) {
        try {
            Colonia colonia = coloniaService.obtenerColoniaPorId(id);
            return Response
                    .status(Response.Status.OK)
                    .entity(colonia)
                    .build();
        } catch (Exception e) {
            return Response
                    .status(Response.Status.NOT_FOUND)
                    .entity(e.getCause().getMessage())
                    .build();
        }
        /*
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            return Response
                    .status(Response.Status.OK)
                    .entity(colonia.get())
                    .build();
        }
        return Response
                .status(Response.Status.NOT_FOUND)
                .entity(null)
                .build();
         */
    }

    @Override
    public Collection<Colonia> getColoniasByCp(String cp) {
        return coloniaRepository.findByCp(cp);
    }

    @Override
    public Response createColonia(Colonia colonia) {
        try {
            Colonia coloniaCreada = coloniaService.crearColonia(colonia);
            return Response
                    .status(Response.Status.CREATED)
                    .entity(coloniaCreada)
                    .build();
        } catch (Exception e) {
            if (e.getCause() instanceof ColoniaAlreadyExistsException) {
                return Response
                        .status(Response.Status.CONFLICT)
                        .entity(e.getCause().getMessage())
                        .build();
            }
            return Response
                    .status(Response.Status.PRECONDITION_REQUIRED)
                    .entity(e.getCause().getMessage())
                    .build();
        }
    }

    @Override
    public void deleteColonia(Integer id) {

    }

    @Override
    public Colonia updateColonia(Integer id, Colonia colonia) {
        return null;
    }

}



{
    "cp": "12000",
    "nombre": "Polanco",
    "municipio": {
        "id": 2
    }
}



package unam.diplomado.pixup.colonia.api.exception;

import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;
import unam.diplomado.pixup.colonia.domain.ColoniaAlreadyExistsException;

@Provider
public class ColoniaAlreadyExistsExceptionMapper
    implements ExceptionMapper<ColoniaAlreadyExistsException> {

    @Override
    public Response toResponse(ColoniaAlreadyExistsException e) {
        return Response
                .status(Response.Status.CONFLICT)
                .entity(e.getMessage())
                .build();
    }

}


package unam.diplomado.pixup.colonia.api.exception;

import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;
import unam.diplomado.pixup.colonia.domain.MunicipioNotFoundException;

@Provider
public class MunicipioNotFoundExceptionMapper
        implements ExceptionMapper<MunicipioNotFoundException> {

    @Override
    public Response toResponse(MunicipioNotFoundException e) {
        return Response
                .status(Response.Status.PRECONDITION_REQUIRED)
                .entity(e.getMessage())
                .build();
    }

}


package unam.diplomado.pixup.colonia.api;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.domain.Colonia;

import java.util.Collection;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("colonias")
public interface ColoniaApi {

    @GET
    @Path("{id}")
    Colonia getColoniaById(@PathParam("id") Integer id);

    @GET
    Collection<Colonia> getColoniasByCp(
            @NotBlank @QueryParam("cp") String cp);

    @DELETE
    @Path("{id}")
    void deleteColonia(@PathParam("id") Integer id);

    @POST
    Response createColonia(@NotNull @Valid Colonia colonia);

    @PUT
    @Path("{id}")
    Colonia updateColonia(@PathParam("id") Integer id, Colonia colonia);

}



package unam.diplomado.pixup.colonia.api;

import jakarta.inject.Inject;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.domain.Colonia;
import unam.diplomado.pixup.colonia.domain.ColoniaAlreadyExistsException;
import unam.diplomado.pixup.colonia.domain.ColoniaNotFoundException;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;
import unam.diplomado.pixup.colonia.service.ColoniaService;

import java.util.Collection;
import java.util.Optional;

public class ColoniaResource implements ColoniaApi {

    @Inject
    private ColoniaRepository coloniaRepository;
    @Inject
    private ColoniaService coloniaService;

    @Override
    public Colonia getColoniaById(Integer id) {
        return coloniaService.obtenerColoniaPorId(id);
    }

    @Override
    public Collection<Colonia> getColoniasByCp(String cp) {
        return coloniaRepository.findByCp(cp);
    }

    @Override
    public Response createColonia(Colonia colonia) {
        Colonia coloniaCreada = coloniaService.crearColonia(colonia);
        return Response.status(Response.Status.CREATED).entity(coloniaCreada).build();
    }

    @Override
    public void deleteColonia(Integer id) {
        coloniaService.eliminarColoniaPorId(id);
    }

    @Override
    public Colonia updateColonia(Integer id, Colonia colonia) {
        colonia.setId(id);
        return coloniaService.actualizarColonia(colonia);
    }

}


package unam.diplomado.pixup.colonia.service;

import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import unam.diplomado.pixup.colonia.domain.*;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;
import unam.diplomado.pixup.colonia.repository.MunicipioRepository;

import java.util.Optional;

@Stateless
public class ColoniaServiceImpl implements ColoniaService {

    @Inject
    private ColoniaRepository coloniaRepository;
    @Inject
    private MunicipioRepository municipioRepository;

    @Override
    public Colonia obtenerColoniaPorId(Integer id) {
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            return colonia.get();
        }
        throw new ColoniaNotFoundException(id);
    }

    @Override
    public Colonia crearColonia(Colonia colonia) {
        Optional<Colonia> coloniaExistente =
            coloniaRepository.findByCpAndNombre(colonia.getCp(), colonia.getNombre());
        if (coloniaExistente.isPresent()) {
            throw new ColoniaAlreadyExistsException(colonia.getCp(), colonia.getNombre());
        }

        Optional<Municipio> municipioExistente =
            municipioRepository.findById(colonia.getMunicipio().getId());
        if (municipioExistente.isEmpty()) {
            throw new MunicipioNotFoundException(colonia.getMunicipio().getId());
        }
        colonia.setMunicipio(municipioExistente.get());

        coloniaRepository.saveOrUpdate(colonia);
        return colonia;
    }

    @Override
    public Colonia actualizarColonia(Colonia colonia) {
        Optional<Colonia> coloniaExistente = coloniaRepository.findById(colonia.getId());
        if (coloniaExistente.isEmpty()) {
            throw new ColoniaNotFoundException(colonia.getId());
        }

        Optional<Colonia> coloniaExistente2 =
                coloniaRepository.findByCpAndNombre(colonia.getCp(), colonia.getNombre());
        if (coloniaExistente2.isPresent()) {
            throw new ColoniaAlreadyExistsException(colonia.getCp(), colonia.getNombre());
        }

        Optional<Municipio> municipioExistente =
                municipioRepository.findById(colonia.getMunicipio().getId());
        if (municipioExistente.isEmpty()) {
            throw new MunicipioNotFoundException(colonia.getMunicipio().getId());
        }

        Colonia coloniaActualizar = coloniaExistente.get();
        coloniaActualizar.setMunicipio(municipioExistente.get());
        coloniaActualizar.setNombre(colonia.getNombre());
        coloniaActualizar.setCp(colonia.getCp());

        coloniaRepository.saveOrUpdate(coloniaActualizar);
        return coloniaActualizar;
    }

    @Override
    public void eliminarColoniaPorId(Integer id) {
        /*
        Optional<Colonia> colonia = coloniaRepository.findById(id);
        if (colonia.isPresent()) {
            coloniaRepository.delete(colonia.get());
        }
         */
        coloniaRepository.findById(id)
            .ifPresent(colonia -> coloniaRepository.delete(colonia));
    }

}



{
    "cp": "12000",
    "nombre": "Normal",
    "municipio": {
        "id": 1
    }
}



package unam.diplomado.pixup.colonia.api.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ColoniaDTO {

    private Integer id;
    private String nombre;
    private String cp;
    private String municipio;
    private String estado;

}


package unam.diplomado.pixup.colonia.api.dto;

import jakarta.inject.Singleton;
import unam.diplomado.pixup.colonia.domain.Colonia;

@Singleton
public class ColoniaMapper {

    public ColoniaDTO toDto(Colonia colonia) {
        return new ColoniaDTO(
                colonia.getId(), colonia.getNombre(), colonia.getCp(),
                colonia.getMunicipio().getNombre(),
                colonia.getMunicipio().getEstado().getNombre());
    }

}


package unam.diplomado.pixup.colonia.api;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.api.dto.ColoniaDTO;
import unam.diplomado.pixup.colonia.domain.Colonia;

import java.util.Collection;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("colonias")
public interface ColoniaApi {

    @GET
    @Path("{id}")
    Colonia getColoniaById(@PathParam("id") Integer id);

    @GET
    Collection<ColoniaDTO> getColoniasByCp(
            @NotBlank @QueryParam("cp") String cp);

    @DELETE
    @Path("{id}")
    void deleteColonia(@PathParam("id") Integer id);

    @POST
    Response createColonia(@NotNull @Valid Colonia colonia);

    @PUT
    @Path("{id}")
    Colonia updateColonia(@PathParam("id") Integer id, Colonia colonia);

}


package unam.diplomado.pixup.colonia.api;

import jakarta.inject.Inject;
import jakarta.ws.rs.core.Response;
import unam.diplomado.pixup.colonia.api.dto.ColoniaDTO;
import unam.diplomado.pixup.colonia.api.dto.ColoniaMapper;
import unam.diplomado.pixup.colonia.domain.Colonia;
import unam.diplomado.pixup.colonia.domain.ColoniaAlreadyExistsException;
import unam.diplomado.pixup.colonia.domain.ColoniaNotFoundException;
import unam.diplomado.pixup.colonia.repository.ColoniaRepository;
import unam.diplomado.pixup.colonia.service.ColoniaService;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Optional;

public class ColoniaResource implements ColoniaApi {

    @Inject
    private ColoniaRepository coloniaRepository;
    @Inject
    private ColoniaService coloniaService;
    @Inject
    private ColoniaMapper coloniaMapper;

    @Override
    public Colonia getColoniaById(Integer id) {
        return coloniaService.obtenerColoniaPorId(id);
    }

    @Override
    public Collection<ColoniaDTO> getColoniasByCp(String cp) {
        /*
        Collection<Colonia> colonias = coloniaRepository.findByCp(cp);
        Collection<ColoniaDTO> coloniasDTO = new ArrayList<>();
        for (Colonia colonia: colonias) {
            coloniasDTO.add(coloniaMapper.toDto(colonia));
        }
        return coloniasDTO;
        */
        return coloniaRepository.findByCp(cp)
                .stream()
                .map(colonia -> coloniaMapper.toDto(colonia))
                .toList();
    }

    @Override
    public Response createColonia(Colonia colonia) {
        Colonia coloniaCreada = coloniaService.crearColonia(colonia);
        return Response.status(Response.Status.CREATED).entity(coloniaCreada).build();
    }

    @Override
    public void deleteColonia(Integer id) {
        coloniaService.eliminarColoniaPorId(id);
    }

    @Override
    public Colonia updateColonia(Integer id, Colonia colonia) {
        colonia.setId(id);
        return coloniaService.actualizarColonia(colonia);
    }

}



package unam.diplomado.pixup.usuario.repository;

import unam.diplomado.pixup.usuario.domain.Domicilio;

public interface DomicilioRepository {

    Domicilio save(Domicilio domicilio);

}



package unam.diplomado.pixup.usuario.repository;

import jakarta.inject.Singleton;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import unam.diplomado.pixup.usuario.domain.Domicilio;

@Singleton
public class JpaDomicilioRepository implements DomicilioRepository {

    @PersistenceContext(unitName="pixup")
    private EntityManager entityManager;

    @Override
    public Domicilio save(Domicilio domicilio) {
        entityManager.persist(domicilio);
        return domicilio;
    }

}


package unam.diplomado.pixup.usuario.repository;

import unam.diplomado.pixup.usuario.domain.Usuario;

import java.util.Optional;

public interface UsuarioRepository {

    Usuario save(Usuario usuario);
    Optional<Usuario> findByEmail(String email);

}


package unam.diplomado.pixup.usuario.repository;

import jakarta.inject.Singleton;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import unam.diplomado.pixup.usuario.domain.Usuario;

import java.util.List;
import java.util.Optional;

@Singleton
public class JpaUsuarioRepository implements UsuarioRepository {

    @PersistenceContext(unitName="pixup")
    private EntityManager entityManager;

    @Override
    public Usuario save(Usuario usuario) {
        entityManager.persist(usuario);
        return usuario;
    }

    @Override
    public Optional<Usuario> findByEmail(String email) {
        TypedQuery<Usuario> query = entityManager.createQuery(
                "SELECT u FROM Usuario u WHERE u.email = :email", Usuario.class);
        query.setParameter("email", email);
        List<Usuario> usuarios = query.getResultList();
        return !usuarios.isEmpty() ? Optional.of(usuarios.get(0)) : Optional.empty();
    }

}



package unam.diplomado.pixup.usuario.service;

import jakarta.ejb.Local;
import unam.diplomado.pixup.usuario.domain.Domicilio;
import unam.diplomado.pixup.usuario.domain.Usuario;

@Local
public interface UsuarioService {

    Usuario registrarUsuario(Usuario usuario, Domicilio domicilio);

}
